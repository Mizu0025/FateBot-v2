import { join } from 'path';
import { writeFileSync } from 'fs';
import { getImageFilename } from './filename-utils';
import { ComfyUIConfig } from '../types/config';
import sharp from 'sharp'; // Import sharp

export interface ImageBytes {
    data: Buffer;
    width: number;
    height: number;
}

export function saveImage(clientId: string, imageBytes: ImageBytes, index: number, comfyUIConfig: ComfyUIConfig): void {
    const filename = getImageFilename(clientId, index + 1);
    const filepath = join(comfyUIConfig.FOLDER_PATH, filename);

    // Use sharp to encode as WebP with EXIF metadata
    sharp(Buffer.from(imageBytes.data))
        .webp({ quality: 80 }) // Adjust quality as needed
        .withMetadata({
            exif: {
                // You can populate these fields with actual data if available
                // For example, from workflowData or promptData if passed down
                // For now, using placeholders or static values
                author: 'FateBot',
                creationDate: new Date().toISOString(),
                // prompt: 'Generated by FateBot' // This would require passing prompt data
            }
        })
        .toFile(filepath)
        .then(() => {
            console.log(`Image saved successfully as ${filepath}`);
        })
        .catch(err => {
            console.error(`Error saving image ${filepath}:`, err);
            // Optionally re-throw or handle the error further
        });
}
