import { join } from 'path';
import { writeFileSync } from 'fs';
import { getImageFilename } from './filename-utils';
import { ComfyUIConfig } from '../types/config';
import { sharp } from 'sharp';

export interface ImageBytes {
    data: Buffer;
    width: number;
    height: number;
}

export function saveImage(clientId: string, imageBytes: ImageBytes, index: number, comfyUIConfig: ComfyUIConfig): void {
    const filename = getImageFilename(clientId, index + 1);
    const filepath = join(comfyUIConfig.FOLDER_PATH, filename);

    // Use sharp to encode as WebP with EXIF metadata
    sharp(Buffer.from(imageBytes.data))
        .webp({ quality: 80 }) // Adjust quality as needed
        .metadata()
        .then(metadata => {
            metadata.exif = {
                author: 'FateBot',
                creationDate: new Date().toISOString(),
                prompt: 'Generated by FateBot' // Or extract from workflow data
            };
            return sharp(Buffer.from(imageBytes.data));
        })
        .then(img => img.webp({ quality: 80 }).toFile(filepath))
        .catch(err => {
            console.error('Error saving image:', err);
        });
}
